// Author: Jesus Carlos Martinez Gonzalez
// Date: 10/06/2020
// Solution to: https://www.hackerrank.com/challenges/the-hurdle-race/problem
// Language: C++
// Problem to solve: Dan is playing a video game in which his character competes in a hurdle race... 
// ... Hurdles are of varying heights, and Dan has a maximum height he can jump.... 
// ... There is a magic potion he can take that will increase his maximum height by 1 unit for each dose...
// ... How many doses of the potion must he take to be able to jump all of the hurdles...
// ... Given an array of hurdle heights height, and an initial maximum height Dan can jump, k, determine the minimum number of doses... 
// ... Dan must take to be able to clear all the hurdles in the race...
// ... For example, if height = [1, 2, 3, 3, 2] and Dan can jump 1 unit high naturally, he must take 3 - 1 = 2 doses of potion to be able to jump all of the hurdles.

// Logic: Iterate over the vector one element at a time, comparing the given element to the max value...
// ... if the current value is larger than max, substitute max with it, at the end...
// ... if k is larger than max, return max - k, else simply return k
int hurdleRace(int k, vector<int> height) {
    int size = height.size();
    int max = 0;
    for (int i = 0; i < size; i++){
        if (height[i] > max) max = height[i];
    }
    return max > k ? max - k : 0;
}